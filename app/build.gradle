plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}
apply from: 'delAesetsFile.gradle'
def delFileNames = null
//def delFileNames = ["mapselectpanel", "sceneassetbundle", "textureassetbundle"]
android {
    compileSdk 33

    defaultConfig {
        applicationId "com.example.stan.jnitest"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ''
            }
        }
        ndk {
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.18.1'
        }
    }
    buildFeatures {
        dataBinding = true
        viewBinding true
    }

    ndkVersion '20.0.5594570'
    buildToolsVersion '33.0.2'
    lintOptions {
        abortOnError false
    }


    task delAssetsFileTask(type: DefaultTask) {
        println(buildFile.getParent() + "-------------------------")
        if (delFileNames != null) {
            if (isBundle()) {
                DelAssetsFile(projectDir.toString().replaceAll('\\\\', '/'), delFileNames as String[])
            }
        }


    }
    task changeFileNameTask {
        doLast {
            def aabPath = "${buildFile.getParent()}/build/outputs/bundle/release/app-release.aab"
            def aabChangeName = "${project.rootDir.path}/aab"
            println("${aabChangeName} + ${aabPath}")
            if (new File(aabPath).exists()) {
                println("file is exists")
            }
            copy {
                from aabPath
                into aabChangeName
                rename {
                    String fileName -> "${aabChangeName}/1.aab"
                }
            }
        }
    }

}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation files('libs/commons-codec-1.16.0.jar')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'com.jakewharton:disklrucache:2.0.2'

    // 协程核心库
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3"
    // 协程Android支持库
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.3"

    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'

    //Preferences DataStore
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    //Proto DataStore
    implementation "androidx.datastore:datastore-core:1.0.0"

    // 第三方RatingBar,解决适配问题
    implementation 'me.zhanghai.android.materialratingbar:library:1.4.0'
}


def DelAssetsFile(String workingDir, String[] names) {
    println("del assets file start")
    File file = new File(workingDir + "/src/main/assets")
    findFileAndDel(file, names)

}

def isBundle() {
    def requests = getGradle().getStartParameter().getTaskRequests()
    if (requests.size > 0) {
        def request0 = requests.get(0)
        if (request0 == null) return null
        def args0 = request0.args[0]
        if (args0 == null) return null
        def taskArgs = args0.toLowerCase()
        println("--------------" + taskArgs)
        if (taskArgs.contains("bundle")) {
            return true
        }
        return false
    }
}

def findFileAndDel(File file, String[] names) {
    if (file.exists()) {
        file.listFiles().each {
            if (it.isDirectory()) {
                findFileAndDel(it, names)
            } else {
                println(it.name)
                if (names.contains(it.name)) {
                    println("Del file name:" + it.name)
                    it.delete()
                }
            }

        }
    }
}